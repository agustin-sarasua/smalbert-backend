AWSTemplateFormatVersion: 2010-09-09

Resources:
  # UserPool
  myApiUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: smalbertUserPool
      UsernameAttributes: [email]
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
  
  # UserPoolClient
  myApiUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
        ClientName: smalbertUserPoolClient
        GenerateSecret: False
        RefreshTokenValidity: 30
        UserPoolId: !Ref myApiUserPool

  # IdentityPool
  myApiIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: smalbertIdentityPool
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref myApiUserPoolClient
          ProviderName: !GetAtt myApiUserPool.ProviderName

  # Admins Group
  adminsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: AdminsGroup
      GroupName: Admins
      Precedence: 0
      RoleArn: !GetAtt adminAuthRole.Arn
      UserPoolId: !Ref myApiUserPool

  # Employee Group
  nonAdminUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Non Admin group
      GroupName: Employee
      Precedence: 2
      RoleArn: !GetAtt employeeAuthRole.Arn
      UserPoolId: !Ref myApiUserPool
  
  # Role for the Admins Group at Cognito UserPool
  adminAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub Cognito_${myApiIdentityPool.Name}_Admin_Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: smalbertAdminAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - mobileanalytics:PutEvents
                - cognito-sync:*
                - execute-api:*
                Resource:
                - "*"
  
  # Role for the Employee Group at Cognito UserPool
  employeeAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub Cognito_${myApiIdentityPool.Name}_Employee_Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: smalbertEmployeeAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action:
                - mobileanalytics:PutEvents
                - cognito-sync:*
                - execute-api:*
                Resource:
                - "arn:aws:execute-api:us-east-1:161262005667:8griob8qr8/*/GET/products/*"

  # Default Role for Unauth
  cognitoUnauthRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub Cognito_${myApiIdentityPool.Name}_Unauth_Role
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: 
              - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals: 
                  cognito-identity.amazonaws.com:aud: !Ref myApiIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated
        Policies:
          - PolicyName: cognitounauth
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  Resource:
                  - "*"
  
  # Default Role for Auth
  cognitoAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub Cognito_${myApiIdentityPool.Name}_Auth_Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals: 
                cognito-identity.amazonaws.com:aud: !Ref myApiIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: cognitoauth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - mobileanalytics:PutEvents
                - cognito-sync:*
                - execute-api:*
                Resource:
                - "*"
  
  myApiIdentityPoolRoleAttachment:
    DependsOn: [ myApiIdentityPool, cognitoUnauthRole, cognitoAuthRole ]
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      Type: Token
      AmbiguousRoleResolution: AuthenticatedRole
      IdentityPoolId: !Ref myApiIdentityPool
      Roles: 
        authenticated: !GetAtt cognitoAuthRole.Arn
        unauthenticated: !GetAtt cognitoUnauthRole.Arn

Outputs:
 userPool:
    Description: "User pool ID"
    Value: !Ref myApiUserPool
 identityPool:
    Description: "Identity pool ID"
    Value: !Ref myApiIdentityPool
 ClientId: 
    Description: "Client id for the user pool appclient"
    Value: !Ref myApiUserPoolClient
 myApiUserPool:
    Value:
        Fn::GetAtt:
        - myApiUserPool
        - Arn
    Description: 'Smalbert User Pool ARN'
    Export:
      Name: smalbert-cognito-user-pool